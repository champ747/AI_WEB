def recommend_cafes_with_service(user_scores, cafes, atmosphere_weight, service_weight):
    """
    user_scores: 사용자 선호도 리스트 (1~6 분위기에 대한 선호도)
    cafes: 각 카페의 분위기 비율 및 서비스 평점을 가진 리스트.
           예: [{'name': 'Cafe A', 'scores': [0.6, 0.4, 0.0, 0.0, 0.0, 0.0], 'service_rating': 4.5}, ...]
    atmosphere_weight: 분위기 가중치
    service_weight: 서비스 가중치
    """
    # 최대 서비스 평점 정의
    max_service_rating = 5.0
    
    # 점수를 계산하여 카페별 점수를 저장할 리스트
    recommendations = []

    for cafe in cafes:
        cafe_name = cafe['name']
        cafe_scores = cafe['scores']
        service_rating = cafe['service_rating']

        # 1. 사용자 선호도와 카페 분위기 비율의 가중합 계산
        atmosphere_score = sum([user_scores[i] * cafe_scores[i] for i in range(len(user_scores))]) * atmosphere_weight

        # 2. 서비스 점수 계산 (높을수록 좋음, 최대 서비스 평점에서 차이를 계산)
        service_score = (max_service_rating - service_rating) * service_weight

        # 3. 최종 점수 계산
        final_score = atmosphere_score + service_score

        # 카페 이름과 최종 점수를 리스트에 추가
        recommendations.append({'name': cafe_name, 'final_score': final_score})

    # 점수를 기준으로 정렬 (오름차순: 점수가 낮을수록 선호)
    recommendations = sorted(recommendations, key=lambda x: x['final_score'])

    return recommendations

# 사용자 선호도 예시 (1~6 분위기에 대한 선호도)
user_scores = [0.8, 0.6, 0.3, 0.2, 0.9, 0.4]

# 카페 정보 예시 (분위기 비율 및 서비스 평점 포함)
cafes = [
    {'name': 'Cafe A', 'scores': [0.6, 0.4, 0.0, 0.0, 0.0, 0.0], 'service_rating': 4.5},
    {'name': 'Cafe B', 'scores': [0.0, 0.8, 0.2, 0.0, 0.0, 0.0], 'service_rating': 4.0},
    {'name': 'Cafe C', 'scores': [0.0, 0.0, 0.5, 0.5, 0.0, 0.0], 'service_rating': 3.8},
    {'name': 'Cafe D', 'scores': [0.1, 0.1, 0.1, 0.1, 0.1, 0.5], 'service_rating': 4.8}
]

# 가중치 설정
atmosphere_weight = 0.7
service_weight = 0.3

# 추천 결과 출력
recommendations = recommend_cafes_with_service(user_scores, cafes, atmosphere_weight, service_weight)
for r in recommendations:
    print(f"카페: {r['name']}, 점수: {r['final_score']:.2f}")
